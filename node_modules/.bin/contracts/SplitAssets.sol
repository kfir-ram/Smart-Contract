// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract SplitAssets {
    uint public assetValue;
    string public assetName;
    uint public maxOwnersNumber;
    uint public currentOwners;
    uint public mainOwnerPercent;
    address[] public investorAddressList = new address[](10);
    uint[] public investorPercentList = new uint[](10);
    bool public created = false;

    //setters
    function setAssetValue(uint value) public payable{assetValue = value;}
    function setAssetName(string memory name) public payable{assetName = name;}
    function setMaxOwnersNumber(uint value) public payable{maxOwnersNumber = value;}
    function setCurrentOwners(uint value) public payable{currentOwners = value;}
    function setMainOwnerPercent(uint value) public payable{mainOwnerPercent = value;}
    function addInvestorAddressList(address investorAddress) public payable{investorAddressList[getCurrentOwners() - 1] = investorAddress;}
    function addInvestorPercentList(uint investorPercent) public payable{investorPercentList[getCurrentOwners() - 1] = uint(investorPercent);}
    function createUpdate() public payable{created = true;}
    function updateMainOwnerPercent(uint percent) public payable{
        mainOwnerPercent -= percent;
        investorPercentList[0] -= percent;
    }

    //getters
    function getAssetName() public view returns (string memory){return assetName;}
    function getAssetValue() public view returns (uint ){return assetValue;}
    function getMaxOwnersNumber() public view returns (uint){return maxOwnersNumber;}
    function getCurrentOwners() public view returns (uint){return currentOwners;}
    function getMainOwnerPercent() public view returns (uint){return mainOwnerPercent;}
    function getInvestorAddressList() public view returns (address[] memory){return investorAddressList;}
    function getInvestorPercentList() public view returns (uint[] memory){return investorPercentList;}
    function isCreated() public view returns (bool){return created;}


    function uploadAsset(string memory name, uint value, uint maxOwnerNumber, uint keepPercent) public returns (string memory) {
        if (!isCreated()){
            setAssetName(name);
            setAssetValue(value);
            setMaxOwnersNumber(maxOwnerNumber);
            setCurrentOwners(1);
            setMainOwnerPercent(keepPercent);
            addInvestorAddressList(msg.sender);
            addInvestorPercentList(100);
            createUpdate();
        }
        else{
            return 'This Asset has been created already.';
        }
        return append('Asset Uploaded Successfully! Name: ', name, ", value: ", uint2str(assetValue), "");
    }

    function buyShares(uint percent) public returns (string memory){
        string memory result;
        if (getCurrentOwners() < getMaxOwnersNumber()){
            addInvestorAddressList(msg.sender);
            addInvestorPercentList(percent);
            updateMainOwnerPercent(percent);
            setCurrentOwners(getCurrentOwners() + 1);
            result = assetInfo();
        }
        else
             result = "Couldn't buy a share of this asset because the number of owner is maximum.";
        return result;
    }

    function sellShares(uint percent) public returns (string memory){
        string memory result;
        address[] memory addresses = getInvestorAddressList();
        address userAddress = msg.sender;
        uint index = 500;
        for (uint i = 0; i < addresses.length; i++){
            if (addresses[i] == userAddress){
                index = i;
            }
        }
        if (index == 500){
            result = "You do no posses a share of this asset.";
        }
        else if (index == 0){
            result = "You are the Owner";
        }
        else{
            percent += 1;
        }

        return result;
    }

    function getLeftPercent() public view returns (string memory){
        uint leftPercent = getInvestorPercentList()[0] - getMainOwnerPercent();
        return uint2str(leftPercent);
    }

    function assetInfo() public view returns (string memory){
        if (getInvestorAddressList().length == 0){
            return "";
        }
        else{
            string memory details = string(abi.encodePacked(getAssetName(), ",", uint2str(getAssetValue()), ",", uint2str(getCurrentOwners()), ",", uint2str(getMaxOwnersNumber()), ","));
            uint[] memory percentList = getInvestorPercentList();
            for (uint i = 0; i < getCurrentOwners(); i++){
                details = string(abi.encodePacked(details, uint2str(percentList[i]), "-"));
            }
            details = string(abi.encodePacked(details, ","));
            details = string(abi.encodePacked(details, getLeftPercent()));
            return details;
        }
    }





























    //Help functions
    function uint2str(uint i) internal pure returns (string memory){
        if (i == 0) return "0";
        uint j = i;
        uint length;
        while (j != 0){
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint k = length - 1;
        while (i != 0){
            bstr[k--] = byte(uint8(48 + i % 10));
            i /= 10;
        }
        return string(bstr);
    }

    function append(string memory a, string memory b, string memory c, string memory d, string memory e) internal pure returns (string memory) {
        return string(abi.encodePacked(a, b, c, d, e));
    }
}