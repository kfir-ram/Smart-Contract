// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract SplitAssets {
    uint public assetValue;
    string public assetName;
    uint public maxOwnersNumber;
    uint public mainOwnerPercent;
    address[] public investorAddressList = new address[](10);
    int[] public investorPercentList = new int[](10);

    //setters
    function setAssetValue(uint value) public{assetValue = value;}
    function setAssetName(string memory name) public{assetName = name;}
    function setMaxOwnersNumber(uint value) public{assetValue = value;}
    function setMainOwnerPercent(uint value) public{assetValue = value;}
    function addInvestorAddressList(address investorAddress) public{investorAddressList.push(investorAddress);}
    function addInvestorPercentList(uint investorPercent) public{investorPercentList[investorPercentList.length - 1] = int(investorPercent);}

    //getters
    function getAssetName() public view returns (string memory){return assetName;}
    function getAssetValue() public view returns (string memory){return uint2str(assetValue);}
    function getMaxOwnersNumber() public view returns (string memory){return uint2str(maxOwnersNumber);}
    function getMainOwnerPercent() public view returns (string memory){return uint2str(mainOwnerPercent);}
    function getInvestorAddressList() public view returns (address[] memory){return investorAddressList;}
    function getInvestoryPercentList() public view returns (int[] memory){return investorPercentList;}


    function uploadAsset(string memory name, uint value, uint maxOwnerNumber, uint keepPercent) public returns (string memory) {
        setAssetName(name);
        setAssetValue(value);
        setMaxOwnersNumber(maxOwnerNumber);
        setMainOwnerPercent(keepPercent);
        addInvestorAddressList(msg.sender);
        addInvestorPercentList(100);
        return append('Asset Uploaded Successfully! Name: ', name, ", value: ", uint2str(assetValue), "");
    }

    function printAsset() public view returns (string memory){
        string memory details = append("Asset Name: ", getAssetName(), "\nAsset Value: ", getAssetValue(), "");
        return details;
    }


    function buyShares() public view returns (string memory){
        string memory details = append("Asset Name: ", getAssetName(), "\nAsset Value: ", getAssetValue(), "");
        return details;
    }

    function sellShares() public view returns (string memory){
        string memory details = append("Asset Name: ", getAssetName(), "\nAsset Value: ", getAssetValue(), "");
        return details;
    }
    
































    //Help functions
    function uint2str(uint i) internal pure returns (string memory){
        if (i == 0) return "0";
        uint j = i;
        uint length;
        while (j != 0){
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint k = length - 1;
        while (i != 0){
            bstr[k--] = byte(uint8(48 + i % 10));
            i /= 10;
        }
        return string(bstr);
    }

    function append(string memory a, string memory b, string memory c, string memory d, string memory e) internal pure returns (string memory) {
        return string(abi.encodePacked(a, b, c, d, e));
    }
}